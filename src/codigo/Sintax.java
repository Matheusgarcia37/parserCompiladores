
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Tue Jun 28 12:21:45 BRT 2022
//----------------------------------------------------

package codigo;

import java_cup.runtime.Symbol;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Tue Jun 28 12:21:45 BRT 2022
  */
public class Sintax extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Sintax() {super();}

  /** Constructor which sets the default scanner. */
  public Sintax(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Sintax(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\073\000\002\002\004\000\002\002\020\000\002\005" +
    "\007\000\002\005\002\000\002\003\004\000\002\004\006" +
    "\000\002\026\003\000\002\026\002\000\002\006\003\000" +
    "\002\006\003\000\002\006\003\000\002\006\003\000\002" +
    "\007\004\000\002\027\004\000\002\027\002\000\002\010" +
    "\004\000\002\010\004\000\002\010\004\000\002\010\004" +
    "\000\002\010\002\000\002\022\003\000\002\022\003\000" +
    "\002\020\003\000\002\020\003\000\002\020\003\000\002" +
    "\020\003\000\002\020\003\000\002\021\003\000\002\021" +
    "\003\000\002\021\003\000\002\021\003\000\002\021\003" +
    "\000\002\021\003\000\002\021\003\000\002\021\003\000" +
    "\002\015\004\000\002\015\004\000\002\015\006\000\002" +
    "\015\005\000\002\015\005\000\002\015\007\000\002\015" +
    "\004\000\002\032\004\000\002\032\004\000\002\032\002" +
    "\000\002\033\004\000\002\033\002\000\002\023\003\000" +
    "\002\023\003\000\002\014\012\000\002\030\006\000\002" +
    "\030\002\000\002\012\007\000\002\011\003\000\002\011" +
    "\003\000\002\016\011\000\002\024\006\000\002\025\003" +
    "\000\002\025\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\167\000\004\004\004\001\002\000\004\005\007\001" +
    "\002\000\004\002\006\001\002\000\004\002\001\001\002" +
    "\000\004\006\010\001\002\000\006\004\012\010\ufffe\001" +
    "\002\000\004\010\017\001\002\000\004\007\013\001\002" +
    "\000\004\064\014\001\002\000\004\065\015\001\002\000" +
    "\006\004\012\010\ufffe\001\002\000\004\010\uffff\001\002" +
    "\000\004\021\020\001\002\000\004\031\021\001\002\000" +
    "\004\032\022\001\002\000\004\035\023\001\002\000\012" +
    "\010\032\011\026\013\024\014\027\001\002\000\004\064" +
    "\ufff6\001\002\000\004\022\166\001\002\000\004\064\ufff7" +
    "\001\002\000\004\064\ufff8\001\002\000\014\015\045\017" +
    "\050\022\uffee\023\051\064\047\001\002\000\004\064\033" +
    "\001\002\000\004\064\ufff9\001\002\000\006\061\040\062" +
    "\ufff3\001\002\000\004\062\035\001\002\000\024\010\032" +
    "\011\026\013\024\014\027\015\ufffa\017\ufffa\022\ufffa\023" +
    "\ufffa\064\ufffa\001\002\000\014\015\ufffb\017\ufffb\022\ufffb" +
    "\023\ufffb\064\ufffb\001\002\000\014\015\ufffc\017\ufffc\022" +
    "\ufffc\023\ufffc\064\ufffc\001\002\000\004\064\033\001\002" +
    "\000\004\062\ufff5\001\002\000\004\062\ufff4\001\002\000" +
    "\016\015\045\017\050\022\uffee\023\051\036\uffee\064\047" +
    "\001\002\000\016\015\045\017\050\022\uffee\023\051\036" +
    "\uffee\064\047\001\002\000\004\031\151\001\002\000\004" +
    "\022\ufffd\001\002\000\004\052\144\001\002\000\004\031" +
    "\140\001\002\000\004\031\060\001\002\000\016\015\uffcc" +
    "\017\uffcc\022\uffcc\023\uffcc\036\uffcc\064\uffcc\001\002\000" +
    "\016\015\uffcb\017\uffcb\022\uffcb\023\uffcb\036\uffcb\064\uffcb" +
    "\001\002\000\016\015\045\017\050\022\uffee\023\051\036" +
    "\uffee\064\047\001\002\000\016\015\045\017\050\022\uffee" +
    "\023\051\036\uffee\064\047\001\002\000\006\022\ufff1\036" +
    "\ufff1\001\002\000\006\022\ufff2\036\ufff2\001\002\000\016" +
    "\031\065\045\063\064\062\065\061\071\066\072\067\001" +
    "\002\000\044\025\112\026\107\027\105\032\uffd5\037\102" +
    "\040\104\041\114\046\103\047\100\050\101\051\077\055" +
    "\113\056\111\057\106\062\uffd5\071\066\072\067\001\002" +
    "\000\044\025\112\026\107\027\105\032\uffd5\037\102\040" +
    "\104\041\114\046\103\047\100\050\101\051\077\055\113" +
    "\056\111\057\106\062\uffd5\071\066\072\067\001\002\000" +
    "\016\031\065\045\063\064\062\065\061\071\066\072\067" +
    "\001\002\000\004\032\131\001\002\000\016\031\065\045" +
    "\063\064\062\065\061\071\066\072\067\001\002\000\046" +
    "\025\uffed\026\uffed\027\uffed\031\uffed\032\uffed\037\uffed\040" +
    "\uffed\041\uffed\046\uffed\047\uffed\050\uffed\051\uffed\055\uffed" +
    "\056\uffed\057\uffed\062\uffed\064\uffed\065\uffed\001\002\000" +
    "\046\025\uffec\026\uffec\027\uffec\031\uffec\032\uffec\037\uffec" +
    "\040\uffec\041\uffec\046\uffec\047\uffec\050\uffec\051\uffec\055" +
    "\uffec\056\uffec\057\uffec\062\uffec\064\uffec\065\uffec\001\002" +
    "\000\010\031\073\064\072\065\071\001\002\000\040\025" +
    "\112\026\107\027\105\032\uffd3\037\102\040\104\041\114" +
    "\046\103\047\100\050\101\051\077\055\113\056\111\057" +
    "\106\062\uffd3\001\002\000\040\025\112\026\107\027\105" +
    "\032\uffd3\037\102\040\104\041\114\046\103\047\100\050" +
    "\101\051\077\055\113\056\111\057\106\062\uffd3\001\002" +
    "\000\016\031\065\045\063\064\062\065\061\071\066\072" +
    "\067\001\002\000\004\032\075\001\002\000\040\025\112" +
    "\026\107\027\105\032\uffd3\037\102\040\104\041\114\046" +
    "\103\047\100\050\101\051\077\055\113\056\111\057\106" +
    "\062\uffd3\001\002\000\016\031\uffd1\045\uffd1\064\uffd1\065" +
    "\uffd1\071\uffd1\072\uffd1\001\002\000\016\031\uffe2\045\uffe2" +
    "\064\uffe2\065\uffe2\071\uffe2\072\uffe2\001\002\000\016\031" +
    "\uffeb\045\uffeb\064\uffeb\065\uffeb\071\uffeb\072\uffeb\001\002" +
    "\000\016\031\uffe4\045\uffe4\064\uffe4\065\uffe4\071\uffe4\072" +
    "\uffe4\001\002\000\016\031\uffe9\045\uffe9\064\uffe9\065\uffe9" +
    "\071\uffe9\072\uffe9\001\002\000\016\031\uffe7\045\uffe7\064" +
    "\uffe7\065\uffe7\071\uffe7\072\uffe7\001\002\000\016\031\uffe8" +
    "\045\uffe8\064\uffe8\065\uffe8\071\uffe8\072\uffe8\001\002\000" +
    "\016\031\uffe6\045\uffe6\064\uffe6\065\uffe6\071\uffe6\072\uffe6" +
    "\001\002\000\016\031\uffe3\045\uffe3\064\uffe3\065\uffe3\071" +
    "\uffe3\072\uffe3\001\002\000\016\031\uffe0\045\uffe0\064\uffe0" +
    "\065\uffe0\071\uffe0\072\uffe0\001\002\000\006\032\uffd9\062" +
    "\uffd9\001\002\000\016\031\uffe1\045\uffe1\064\uffe1\065\uffe1" +
    "\071\uffe1\072\uffe1\001\002\000\016\031\uffdf\045\uffdf\064" +
    "\uffdf\065\uffdf\071\uffdf\072\uffdf\001\002\000\016\031\uffe5" +
    "\045\uffe5\064\uffe5\065\uffe5\071\uffe5\072\uffe5\001\002\000" +
    "\016\031\uffea\045\uffea\064\uffea\065\uffea\071\uffea\072\uffea" +
    "\001\002\000\016\031\065\045\063\064\062\065\061\071" +
    "\066\072\067\001\002\000\016\031\uffd2\045\uffd2\064\uffd2" +
    "\065\uffd2\071\uffd2\072\uffd2\001\002\000\006\032\uffd4\062" +
    "\uffd4\001\002\000\006\032\uffda\062\uffda\001\002\000\006" +
    "\032\uffdb\062\uffdb\001\002\000\004\032\123\001\002\000" +
    "\044\025\112\026\107\027\105\032\uffd5\037\102\040\104" +
    "\041\114\046\103\047\100\050\101\051\077\055\113\056" +
    "\111\057\106\062\uffd5\071\066\072\067\001\002\000\006" +
    "\032\uffdc\062\uffdc\001\002\000\040\025\112\026\107\027" +
    "\105\032\uffd3\037\102\040\104\041\114\046\103\047\100" +
    "\050\101\051\077\055\113\056\111\057\106\062\uffd3\001" +
    "\002\000\016\031\065\045\063\064\062\065\061\071\066" +
    "\072\067\001\002\000\006\032\uffd7\062\uffd7\001\002\000" +
    "\006\032\uffd6\062\uffd6\001\002\000\004\035\132\001\002" +
    "\000\014\015\045\017\050\023\051\036\uffee\064\047\001" +
    "\002\000\004\036\134\001\002\000\016\015\uffca\017\uffca" +
    "\022\uffca\023\uffca\036\uffca\064\uffca\001\002\000\006\032" +
    "\uffd8\062\uffd8\001\002\000\006\032\uffdd\062\uffdd\001\002" +
    "\000\006\032\uffde\062\uffde\001\002\000\004\064\141\001" +
    "\002\000\004\032\142\001\002\000\004\062\143\001\002" +
    "\000\016\015\uffcd\017\uffcd\022\uffcd\023\uffcd\036\uffcd\064" +
    "\uffcd\001\002\000\020\031\065\045\063\064\062\065\061" +
    "\066\146\071\066\072\067\001\002\000\004\062\150\001" +
    "\002\000\004\062\uffc7\001\002\000\004\062\uffc8\001\002" +
    "\000\016\015\uffc9\017\uffc9\022\uffc9\023\uffc9\036\uffc9\064" +
    "\uffc9\001\002\000\016\031\065\045\063\064\062\065\061" +
    "\071\066\072\067\001\002\000\004\032\153\001\002\000" +
    "\004\035\154\001\002\000\014\015\045\017\050\023\051" +
    "\036\uffee\064\047\001\002\000\004\036\156\001\002\000" +
    "\020\015\uffce\016\157\017\uffce\022\uffce\023\uffce\036\uffce" +
    "\064\uffce\001\002\000\004\035\161\001\002\000\016\015" +
    "\uffd0\017\uffd0\022\uffd0\023\uffd0\036\uffd0\064\uffd0\001\002" +
    "\000\014\015\045\017\050\023\051\036\uffee\064\047\001" +
    "\002\000\004\036\163\001\002\000\016\015\uffcf\017\uffcf" +
    "\022\uffcf\023\uffcf\036\uffcf\064\uffcf\001\002\000\006\022" +
    "\ufff0\036\ufff0\001\002\000\006\022\uffef\036\uffef\001\002" +
    "\000\004\065\167\001\002\000\004\062\170\001\002\000" +
    "\004\036\171\001\002\000\004\002\000\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\167\000\004\002\004\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\005\010\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\005\015\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\003\024\004\027" +
    "\006\030\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\020\010\045\011\053" +
    "\012\054\014\043\016\051\017\052\024\042\001\001\000" +
    "\004\007\033\001\001\000\002\001\001\000\004\027\040" +
    "\001\001\000\002\001\001\000\010\004\035\006\030\026" +
    "\036\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\007\041\001\001\000\002\001\001\000\002\001\001\000" +
    "\020\010\164\011\053\012\054\014\043\016\051\017\052" +
    "\024\042\001\001\000\020\010\163\011\053\012\054\014" +
    "\043\016\051\017\052\024\042\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\020" +
    "\010\056\011\053\012\054\014\043\016\051\017\052\024" +
    "\042\001\001\000\020\010\055\011\053\012\054\014\043" +
    "\016\051\017\052\024\042\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\015\063\022\067\001\001\000\014" +
    "\020\115\021\075\022\124\023\125\032\136\001\001\000" +
    "\014\020\115\021\075\022\124\023\125\032\135\001\001" +
    "\000\006\015\134\022\067\001\001\000\002\001\001\000" +
    "\006\015\121\022\067\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\020\115\021\075\023" +
    "\114\033\120\001\001\000\012\020\115\021\075\023\114" +
    "\033\117\001\001\000\006\015\073\022\067\001\001\000" +
    "\002\001\001\000\012\020\115\021\075\023\114\033\107" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\015" +
    "\116\022\067\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\014\020\115\021\075\022\124\023\125\032\123\001\001" +
    "\000\002\001\001\000\012\020\115\021\075\023\114\033" +
    "\127\001\001\000\006\015\126\022\067\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\020\010" +
    "\132\011\053\012\054\014\043\016\051\017\052\024\042" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\015\146\022\067\025\144\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\015\151\022\067\001\001\000\002\001\001\000\002" +
    "\001\001\000\020\010\154\011\053\012\054\014\043\016" +
    "\051\017\052\024\042\001\001\000\002\001\001\000\004" +
    "\030\157\001\001\000\002\001\001\000\002\001\001\000" +
    "\020\010\161\011\053\012\054\014\043\016\051\017\052" +
    "\024\042\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Sintax$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Sintax$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Sintax$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    private Symbol s;
    
    public void syntax_error(Symbol s){
        this.s = s;
    }

    public Symbol getS(){
        return this.s;
}

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Sintax$actions {
  private final Sintax parser;

  /** Constructor */
  CUP$Sintax$actions(Sintax parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Sintax$do_action(
    int                        CUP$Sintax$act_num,
    java_cup.runtime.lr_parser CUP$Sintax$parser,
    java.util.Stack            CUP$Sintax$stack,
    int                        CUP$Sintax$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Sintax$result;

      /* select the action based on the action number */
      switch (CUP$Sintax$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // VALOR ::= String 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VALOR",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // VALOR ::= EXPRESSAO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VALOR",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // ATRIBUICAO ::= Id Recebe VALOR Pv 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ATRIBUICAO",18, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // LACO_WHILE ::= Enquanto AbreP EXPRESSAO FechaP AbreCH COMANDOS FechaCH 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LACO_WHILE",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // REPETICAO ::= LACO_FOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("REPETICAO",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // REPETICAO ::= LACO_WHILE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("REPETICAO",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // LER ::= Scanf AbreP Id FechaP Pv 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LER",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // AUX3 ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AUX3",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // AUX3 ::= Else AbreCH COMANDOS FechaCH 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AUX3",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // SE ::= If AbreP EXPRESSAO FechaP AbreCH COMANDOS FechaCH AUX3 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SE",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // OP_ARI_OU_LO ::= OP_LO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OP_ARI_OU_LO",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // OP_ARI_OU_LO ::= OP_ARI 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OP_ARI_OU_LO",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // AUX6 ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AUX6",25, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // AUX6 ::= OP_ARI_OU_LO EXPRESSAO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AUX6",25, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // AUX5 ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AUX5",24, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // AUX5 ::= INCREMENTO AUX6 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AUX5",24, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // AUX5 ::= OP_ARI_OU_LO EXPRESSAO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AUX5",24, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // EXPRESSAO ::= Not EXPRESSAO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESSAO",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // EXPRESSAO ::= INCREMENTO AbreP EXPRESSAO FechaP AUX6 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESSAO",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // EXPRESSAO ::= INCREMENTO Id AUX6 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESSAO",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // EXPRESSAO ::= INCREMENTO Numero AUX6 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESSAO",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // EXPRESSAO ::= AbreP EXPRESSAO FechaP AUX5 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESSAO",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // EXPRESSAO ::= Id AUX5 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESSAO",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // EXPRESSAO ::= Numero AUX5 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESSAO",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // OP_LO ::= AndAnd 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OP_LO",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // OP_LO ::= Or 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OP_LO",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // OP_LO ::= MaiorIgual 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OP_LO",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // OP_LO ::= Maior 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OP_LO",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // OP_LO ::= MenorIgual 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OP_LO",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // OP_LO ::= Menor 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OP_LO",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // OP_LO ::= Diferente 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OP_LO",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // OP_LO ::= Equal 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OP_LO",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // OP_ARI ::= Resto 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OP_ARI",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // OP_ARI ::= Subtracao 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OP_ARI",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // OP_ARI ::= Soma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OP_ARI",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // OP_ARI ::= Divisao 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OP_ARI",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // OP_ARI ::= Multiplicacao 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OP_ARI",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // INCREMENTO ::= Decremento 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INCREMENTO",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // INCREMENTO ::= Incremento 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INCREMENTO",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // COMANDOS ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("COMANDOS",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // COMANDOS ::= ATRIBUICAO COMANDOS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("COMANDOS",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // COMANDOS ::= SE COMANDOS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("COMANDOS",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // COMANDOS ::= LER COMANDOS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("COMANDOS",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // COMANDOS ::= REPETICAO COMANDOS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("COMANDOS",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // AUX2 ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AUX2",21, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // AUX2 ::= Vir LISTAIDS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AUX2",21, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // LISTAIDS ::= Id AUX2 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LISTAIDS",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // TIPO ::= Char 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TIPO",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // TIPO ::= Double 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TIPO",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // TIPO ::= Float 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TIPO",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // TIPO ::= Int 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TIPO",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // AUX1 ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AUX1",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // AUX1 ::= DECLARACAO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AUX1",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // DECLARACAO ::= TIPO LISTAIDS Pv AUX1 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACAO",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // COMANDO ::= DECLARACAO COMANDOS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("COMANDO",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // MAISCONST ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("MAISCONST",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // MAISCONST ::= Hash Constante Id Numero MAISCONST 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("MAISCONST",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= Hash Include Lib MAISCONST Int Main AbreP FechaP AbreCH COMANDO Return Numero Pv FechaCH 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-13)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		RESULT = start_val;
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Sintax$parser.done_parsing();
          return CUP$Sintax$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

