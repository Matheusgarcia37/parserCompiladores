
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Tue Jun 28 12:43:52 BRT 2022
//----------------------------------------------------

package codigo;

import java_cup.runtime.Symbol;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Tue Jun 28 12:43:52 BRT 2022
  */
public class Sintax extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Sintax() {super();}

  /** Constructor which sets the default scanner. */
  public Sintax(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Sintax(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\077\000\002\002\004\000\002\002\020\000\002\005" +
    "\007\000\002\005\002\000\002\003\004\000\002\004\006" +
    "\000\002\026\003\000\002\026\002\000\002\006\003\000" +
    "\002\006\003\000\002\006\003\000\002\006\003\000\002" +
    "\007\004\000\002\027\004\000\002\027\002\000\002\010" +
    "\004\000\002\010\004\000\002\010\004\000\002\010\004" +
    "\000\002\010\004\000\002\010\002\000\002\022\003\000" +
    "\002\022\003\000\002\020\003\000\002\020\003\000\002" +
    "\020\003\000\002\020\003\000\002\020\003\000\002\021" +
    "\003\000\002\021\003\000\002\021\003\000\002\021\003" +
    "\000\002\021\003\000\002\021\003\000\002\021\003\000" +
    "\002\021\003\000\002\015\004\000\002\015\004\000\002" +
    "\015\006\000\002\015\005\000\002\015\005\000\002\015" +
    "\007\000\002\015\004\000\002\032\004\000\002\032\004" +
    "\000\002\032\002\000\002\033\004\000\002\033\002\000" +
    "\002\023\003\000\002\023\003\000\002\014\012\000\002" +
    "\030\006\000\002\030\002\000\002\011\003\000\002\011" +
    "\003\000\002\016\011\000\002\017\015\000\002\024\006" +
    "\000\002\025\003\000\002\025\003\000\002\012\007\000" +
    "\002\013\007\000\002\013\007" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\214\000\004\004\004\001\002\000\004\005\007\001" +
    "\002\000\004\002\006\001\002\000\004\002\001\001\002" +
    "\000\004\006\010\001\002\000\006\004\012\010\ufffe\001" +
    "\002\000\004\010\017\001\002\000\004\007\013\001\002" +
    "\000\004\064\014\001\002\000\004\065\015\001\002\000" +
    "\006\004\012\010\ufffe\001\002\000\004\010\uffff\001\002" +
    "\000\004\021\020\001\002\000\004\031\021\001\002\000" +
    "\004\032\022\001\002\000\004\035\023\001\002\000\012" +
    "\010\032\011\026\013\024\014\027\001\002\000\004\064" +
    "\ufff6\001\002\000\004\022\213\001\002\000\004\064\ufff7" +
    "\001\002\000\004\064\ufff8\001\002\000\020\015\045\017" +
    "\053\020\054\022\uffed\023\050\024\052\064\047\001\002" +
    "\000\004\064\033\001\002\000\004\064\ufff9\001\002\000" +
    "\010\032\ufff3\061\040\062\ufff3\001\002\000\004\062\035" +
    "\001\002\000\030\010\032\011\026\013\024\014\027\015" +
    "\ufffa\017\ufffa\020\ufffa\022\ufffa\023\ufffa\024\ufffa\064\ufffa" +
    "\001\002\000\020\015\ufffb\017\ufffb\020\ufffb\022\ufffb\023" +
    "\ufffb\024\ufffb\064\ufffb\001\002\000\020\015\ufffc\017\ufffc" +
    "\020\ufffc\022\ufffc\023\ufffc\024\ufffc\064\ufffc\001\002\000" +
    "\004\064\033\001\002\000\006\032\ufff5\062\ufff5\001\002" +
    "\000\006\032\ufff4\062\ufff4\001\002\000\022\015\045\017" +
    "\053\020\054\022\uffed\023\050\024\052\036\uffed\064\047" +
    "\001\002\000\022\015\045\017\053\020\054\022\uffed\023" +
    "\050\024\052\036\uffed\064\047\001\002\000\004\031\176" +
    "\001\002\000\004\022\ufffd\001\002\000\004\052\171\001" +
    "\002\000\004\031\163\001\002\000\022\015\uffcc\017\uffcc" +
    "\020\uffcc\022\uffcc\023\uffcc\024\uffcc\036\uffcc\064\uffcc\001" +
    "\002\000\004\031\077\001\002\000\004\031\073\001\002" +
    "\000\004\031\064\001\002\000\022\015\uffcb\017\uffcb\020" +
    "\uffcb\022\uffcb\023\uffcb\024\uffcb\036\uffcb\064\uffcb\001\002" +
    "\000\022\015\045\017\053\020\054\022\uffed\023\050\024" +
    "\052\036\uffed\064\047\001\002\000\022\015\045\017\053" +
    "\020\054\022\uffed\023\050\024\052\036\uffed\064\047\001" +
    "\002\000\022\015\045\017\053\020\054\022\uffed\023\050" +
    "\024\052\036\uffed\064\047\001\002\000\006\022\ufff1\036" +
    "\ufff1\001\002\000\006\022\ufff2\036\ufff2\001\002\000\006" +
    "\022\ufff0\036\ufff0\001\002\000\006\064\033\066\065\001" +
    "\002\000\004\032\071\001\002\000\004\032\067\001\002" +
    "\000\004\062\070\001\002\000\022\015\uffc4\017\uffc4\020" +
    "\uffc4\022\uffc4\023\uffc4\024\uffc4\036\uffc4\064\uffc4\001\002" +
    "\000\004\062\072\001\002\000\022\015\uffc3\017\uffc3\020" +
    "\uffc3\022\uffc3\023\uffc3\024\uffc3\036\uffc3\064\uffc3\001\002" +
    "\000\004\064\074\001\002\000\004\032\075\001\002\000" +
    "\004\062\076\001\002\000\022\015\uffc5\017\uffc5\020\uffc5" +
    "\022\uffc5\023\uffc5\024\uffc5\036\uffc5\064\uffc5\001\002\000" +
    "\004\064\047\001\002\000\016\031\104\045\103\064\102" +
    "\065\101\071\105\072\107\001\002\000\044\025\132\026" +
    "\127\027\126\032\uffd4\037\123\040\124\041\134\046\122" +
    "\047\120\050\121\051\117\055\133\056\131\057\125\062" +
    "\uffd4\071\105\072\107\001\002\000\044\025\132\026\127" +
    "\027\126\032\uffd4\037\123\040\124\041\134\046\122\047" +
    "\120\050\121\051\117\055\133\056\131\057\125\062\uffd4" +
    "\071\105\072\107\001\002\000\016\031\104\045\103\064" +
    "\102\065\101\071\105\072\107\001\002\000\016\031\104" +
    "\045\103\064\102\065\101\071\105\072\107\001\002\000" +
    "\046\025\uffec\026\uffec\027\uffec\031\uffec\032\uffec\037\uffec" +
    "\040\uffec\041\uffec\046\uffec\047\uffec\050\uffec\051\uffec\055" +
    "\uffec\056\uffec\057\uffec\062\uffec\064\uffec\065\uffec\001\002" +
    "\000\004\062\142\001\002\000\046\025\uffeb\026\uffeb\027" +
    "\uffeb\031\uffeb\032\uffeb\037\uffeb\040\uffeb\041\uffeb\046\uffeb" +
    "\047\uffeb\050\uffeb\051\uffeb\055\uffeb\056\uffeb\057\uffeb\062" +
    "\uffeb\064\uffeb\065\uffeb\001\002\000\010\031\113\064\112" +
    "\065\111\001\002\000\040\025\132\026\127\027\126\032" +
    "\uffd2\037\123\040\124\041\134\046\122\047\120\050\121" +
    "\051\117\055\133\056\131\057\125\062\uffd2\001\002\000" +
    "\040\025\132\026\127\027\126\032\uffd2\037\123\040\124" +
    "\041\134\046\122\047\120\050\121\051\117\055\133\056" +
    "\131\057\125\062\uffd2\001\002\000\016\031\104\045\103" +
    "\064\102\065\101\071\105\072\107\001\002\000\004\032" +
    "\115\001\002\000\040\025\132\026\127\027\126\032\uffd2" +
    "\037\123\040\124\041\134\046\122\047\120\050\121\051" +
    "\117\055\133\056\131\057\125\062\uffd2\001\002\000\016" +
    "\031\uffd0\045\uffd0\064\uffd0\065\uffd0\071\uffd0\072\uffd0\001" +
    "\002\000\016\031\uffe1\045\uffe1\064\uffe1\065\uffe1\071\uffe1" +
    "\072\uffe1\001\002\000\016\031\uffea\045\uffea\064\uffea\065" +
    "\uffea\071\uffea\072\uffea\001\002\000\016\031\uffe3\045\uffe3" +
    "\064\uffe3\065\uffe3\071\uffe3\072\uffe3\001\002\000\016\031" +
    "\uffe6\045\uffe6\064\uffe6\065\uffe6\071\uffe6\072\uffe6\001\002" +
    "\000\016\031\uffe8\045\uffe8\064\uffe8\065\uffe8\071\uffe8\072" +
    "\uffe8\001\002\000\016\031\uffe7\045\uffe7\064\uffe7\065\uffe7" +
    "\071\uffe7\072\uffe7\001\002\000\016\031\uffe2\045\uffe2\064" +
    "\uffe2\065\uffe2\071\uffe2\072\uffe2\001\002\000\016\031\uffe5" +
    "\045\uffe5\064\uffe5\065\uffe5\071\uffe5\072\uffe5\001\002\000" +
    "\016\031\uffdf\045\uffdf\064\uffdf\065\uffdf\071\uffdf\072\uffdf" +
    "\001\002\000\006\032\uffd8\062\uffd8\001\002\000\016\031" +
    "\uffe0\045\uffe0\064\uffe0\065\uffe0\071\uffe0\072\uffe0\001\002" +
    "\000\016\031\uffde\045\uffde\064\uffde\065\uffde\071\uffde\072" +
    "\uffde\001\002\000\016\031\uffe4\045\uffe4\064\uffe4\065\uffe4" +
    "\071\uffe4\072\uffe4\001\002\000\016\031\uffe9\045\uffe9\064" +
    "\uffe9\065\uffe9\071\uffe9\072\uffe9\001\002\000\016\031\104" +
    "\045\103\064\102\065\101\071\105\072\107\001\002\000" +
    "\016\031\uffd1\045\uffd1\064\uffd1\065\uffd1\071\uffd1\072\uffd1" +
    "\001\002\000\006\032\uffd3\062\uffd3\001\002\000\006\032" +
    "\uffd9\062\uffd9\001\002\000\006\032\uffda\062\uffda\001\002" +
    "\000\004\064\143\001\002\000\006\071\105\072\107\001" +
    "\002\000\004\032\145\001\002\000\004\035\146\001\002" +
    "\000\020\015\045\017\053\020\054\023\050\024\052\036" +
    "\uffed\064\047\001\002\000\004\036\150\001\002\000\022" +
    "\015\uffc9\017\uffc9\020\uffc9\022\uffc9\023\uffc9\024\uffc9\036" +
    "\uffc9\064\uffc9\001\002\000\004\032\152\001\002\000\044" +
    "\025\132\026\127\027\126\032\uffd4\037\123\040\124\041" +
    "\134\046\122\047\120\050\121\051\117\055\133\056\131" +
    "\057\125\062\uffd4\071\105\072\107\001\002\000\006\032" +
    "\uffdb\062\uffdb\001\002\000\040\025\132\026\127\027\126" +
    "\032\uffd2\037\123\040\124\041\134\046\122\047\120\050" +
    "\121\051\117\055\133\056\131\057\125\062\uffd2\001\002" +
    "\000\016\031\104\045\103\064\102\065\101\071\105\072" +
    "\107\001\002\000\006\032\uffd6\062\uffd6\001\002\000\006" +
    "\032\uffd5\062\uffd5\001\002\000\006\032\uffd7\062\uffd7\001" +
    "\002\000\006\032\uffdc\062\uffdc\001\002\000\006\032\uffdd" +
    "\062\uffdd\001\002\000\016\031\104\045\103\064\102\065" +
    "\101\071\105\072\107\001\002\000\004\032\165\001\002" +
    "\000\004\035\166\001\002\000\020\015\045\017\053\020" +
    "\054\023\050\024\052\036\uffed\064\047\001\002\000\004" +
    "\036\170\001\002\000\022\015\uffca\017\uffca\020\uffca\022" +
    "\uffca\023\uffca\024\uffca\036\uffca\064\uffca\001\002\000\020" +
    "\031\104\045\103\064\102\065\101\066\173\071\105\072" +
    "\107\001\002\000\004\062\175\001\002\000\004\062\uffc6" +
    "\001\002\000\004\062\uffc7\001\002\000\034\015\uffc8\017" +
    "\uffc8\020\uffc8\022\uffc8\023\uffc8\024\uffc8\031\uffc8\036\uffc8" +
    "\045\uffc8\064\uffc8\065\uffc8\071\uffc8\072\uffc8\001\002\000" +
    "\016\031\104\045\103\064\102\065\101\071\105\072\107" +
    "\001\002\000\004\032\200\001\002\000\004\035\201\001" +
    "\002\000\020\015\045\017\053\020\054\023\050\024\052" +
    "\036\uffed\064\047\001\002\000\004\036\203\001\002\000" +
    "\024\015\uffcd\016\204\017\uffcd\020\uffcd\022\uffcd\023\uffcd" +
    "\024\uffcd\036\uffcd\064\uffcd\001\002\000\004\035\206\001" +
    "\002\000\022\015\uffcf\017\uffcf\020\uffcf\022\uffcf\023\uffcf" +
    "\024\uffcf\036\uffcf\064\uffcf\001\002\000\020\015\045\017" +
    "\053\020\054\023\050\024\052\036\uffed\064\047\001\002" +
    "\000\004\036\210\001\002\000\022\015\uffce\017\uffce\020" +
    "\uffce\022\uffce\023\uffce\024\uffce\036\uffce\064\uffce\001\002" +
    "\000\006\022\uffef\036\uffef\001\002\000\006\022\uffee\036" +
    "\uffee\001\002\000\004\065\214\001\002\000\004\062\215" +
    "\001\002\000\004\036\216\001\002\000\004\002\000\001" +
    "\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\214\000\004\002\004\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\005\010\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\005\015\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\003\024\004\027" +
    "\006\030\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\022\010\045\011\056" +
    "\012\057\013\055\014\043\016\050\017\054\024\042\001" +
    "\001\000\004\007\033\001\001\000\002\001\001\000\004" +
    "\027\040\001\001\000\002\001\001\000\010\004\035\006" +
    "\030\026\036\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\007\041\001\001\000\002\001\001\000\002\001" +
    "\001\000\022\010\211\011\056\012\057\013\055\014\043" +
    "\016\050\017\054\024\042\001\001\000\022\010\210\011" +
    "\056\012\057\013\055\014\043\016\050\017\054\024\042" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\022\010\062\011\056\012\057\013\055\014\043\016\050" +
    "\017\054\024\042\001\001\000\022\010\061\011\056\012" +
    "\057\013\055\014\043\016\050\017\054\024\042\001\001" +
    "\000\022\010\060\011\056\012\057\013\055\014\043\016" +
    "\050\017\054\024\042\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\007\065\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\024\077\001\001\000\006\015\105\022\107\001" +
    "\001\000\014\020\135\021\115\022\153\023\154\032\161" +
    "\001\001\000\014\020\135\021\115\022\153\023\154\032" +
    "\160\001\001\000\006\015\157\022\107\001\001\000\006" +
    "\015\150\022\107\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\020\135" +
    "\021\115\023\134\033\140\001\001\000\012\020\135\021" +
    "\115\023\134\033\137\001\001\000\006\015\113\022\107" +
    "\001\001\000\002\001\001\000\012\020\135\021\115\023" +
    "\134\033\127\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\015\136\022\107\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\022\143\001\001\000\002\001\001\000" +
    "\002\001\001\000\022\010\146\011\056\012\057\013\055" +
    "\014\043\016\050\017\054\024\042\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\014\020\135" +
    "\021\115\022\153\023\154\032\152\001\001\000\002\001" +
    "\001\000\012\020\135\021\115\023\134\033\156\001\001" +
    "\000\006\015\155\022\107\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\015\163\022\107\001\001\000\002\001" +
    "\001\000\002\001\001\000\022\010\166\011\056\012\057" +
    "\013\055\014\043\016\050\017\054\024\042\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\015\173\022\107" +
    "\025\171\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\015\176\022\107" +
    "\001\001\000\002\001\001\000\002\001\001\000\022\010" +
    "\201\011\056\012\057\013\055\014\043\016\050\017\054" +
    "\024\042\001\001\000\002\001\001\000\004\030\204\001" +
    "\001\000\002\001\001\000\002\001\001\000\022\010\206" +
    "\011\056\012\057\013\055\014\043\016\050\017\054\024" +
    "\042\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Sintax$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Sintax$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Sintax$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    private Symbol s;
    
    public void syntax_error(Symbol s){
        this.s = s;
    }

    public Symbol getS(){
        return this.s;
}

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Sintax$actions {
  private final Sintax parser;

  /** Constructor */
  CUP$Sintax$actions(Sintax parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Sintax$do_action(
    int                        CUP$Sintax$act_num,
    java_cup.runtime.lr_parser CUP$Sintax$parser,
    java.util.Stack            CUP$Sintax$stack,
    int                        CUP$Sintax$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Sintax$result;

      /* select the action based on the action number */
      switch (CUP$Sintax$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // IMPRIMIR ::= Printf AbreP String FechaP Pv 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IMPRIMIR",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // IMPRIMIR ::= Printf AbreP LISTAIDS FechaP Pv 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IMPRIMIR",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // LER ::= Scanf AbreP Id FechaP Pv 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LER",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // VALOR ::= String 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VALOR",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // VALOR ::= EXPRESSAO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VALOR",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // ATRIBUICAO ::= Id Recebe VALOR Pv 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ATRIBUICAO",18, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // LACO_FOR ::= Para AbreP ATRIBUICAO EXPRESSAO Pv Id INCREMENTO FechaP AbreCH COMANDOS FechaCH 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LACO_FOR",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-10)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // LACO_WHILE ::= Enquanto AbreP EXPRESSAO FechaP AbreCH COMANDOS FechaCH 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LACO_WHILE",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // REPETICAO ::= LACO_FOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("REPETICAO",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // REPETICAO ::= LACO_WHILE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("REPETICAO",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // AUX3 ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AUX3",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // AUX3 ::= Else AbreCH COMANDOS FechaCH 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AUX3",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // SE ::= If AbreP EXPRESSAO FechaP AbreCH COMANDOS FechaCH AUX3 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SE",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // OP_ARI_OU_LO ::= OP_LO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OP_ARI_OU_LO",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // OP_ARI_OU_LO ::= OP_ARI 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OP_ARI_OU_LO",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // AUX6 ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AUX6",25, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // AUX6 ::= OP_ARI_OU_LO EXPRESSAO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AUX6",25, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // AUX5 ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AUX5",24, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // AUX5 ::= INCREMENTO AUX6 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AUX5",24, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // AUX5 ::= OP_ARI_OU_LO EXPRESSAO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AUX5",24, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // EXPRESSAO ::= Not EXPRESSAO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESSAO",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // EXPRESSAO ::= INCREMENTO AbreP EXPRESSAO FechaP AUX6 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESSAO",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // EXPRESSAO ::= INCREMENTO Id AUX6 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESSAO",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // EXPRESSAO ::= INCREMENTO Numero AUX6 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESSAO",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // EXPRESSAO ::= AbreP EXPRESSAO FechaP AUX5 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESSAO",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // EXPRESSAO ::= Id AUX5 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESSAO",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // EXPRESSAO ::= Numero AUX5 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESSAO",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // OP_LO ::= AndAnd 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OP_LO",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // OP_LO ::= Or 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OP_LO",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // OP_LO ::= MaiorIgual 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OP_LO",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // OP_LO ::= Maior 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OP_LO",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // OP_LO ::= MenorIgual 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OP_LO",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // OP_LO ::= Menor 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OP_LO",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // OP_LO ::= Diferente 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OP_LO",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // OP_LO ::= Equal 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OP_LO",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // OP_ARI ::= Resto 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OP_ARI",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // OP_ARI ::= Subtracao 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OP_ARI",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // OP_ARI ::= Soma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OP_ARI",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // OP_ARI ::= Divisao 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OP_ARI",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // OP_ARI ::= Multiplicacao 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OP_ARI",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // INCREMENTO ::= Decremento 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INCREMENTO",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // INCREMENTO ::= Incremento 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INCREMENTO",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // COMANDOS ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("COMANDOS",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // COMANDOS ::= ATRIBUICAO COMANDOS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("COMANDOS",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // COMANDOS ::= SE COMANDOS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("COMANDOS",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // COMANDOS ::= IMPRIMIR COMANDOS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("COMANDOS",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // COMANDOS ::= LER COMANDOS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("COMANDOS",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // COMANDOS ::= REPETICAO COMANDOS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("COMANDOS",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // AUX2 ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AUX2",21, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // AUX2 ::= Vir LISTAIDS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AUX2",21, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // LISTAIDS ::= Id AUX2 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LISTAIDS",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // TIPO ::= Char 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TIPO",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // TIPO ::= Double 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TIPO",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // TIPO ::= Float 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TIPO",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // TIPO ::= Int 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TIPO",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // AUX1 ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AUX1",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // AUX1 ::= DECLARACAO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AUX1",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // DECLARACAO ::= TIPO LISTAIDS Pv AUX1 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACAO",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // COMANDO ::= DECLARACAO COMANDOS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("COMANDO",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // MAISCONST ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("MAISCONST",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // MAISCONST ::= Hash Constante Id Numero MAISCONST 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("MAISCONST",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= Hash Include Lib MAISCONST Int Main AbreP FechaP AbreCH COMANDO Return Numero Pv FechaCH 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-13)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		RESULT = start_val;
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Sintax$parser.done_parsing();
          return CUP$Sintax$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

