
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Tue Jun 28 20:35:03 BRT 2022
//----------------------------------------------------

package codigo;

import java_cup.runtime.Symbol;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Tue Jun 28 20:35:03 BRT 2022
  */
public class Sintax extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Sintax() {super();}

  /** Constructor which sets the default scanner. */
  public Sintax(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Sintax(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\107\000\002\002\004\000\002\002\020\000\002\005" +
    "\007\000\002\005\002\000\002\026\004\000\002\026\006" +
    "\000\002\027\003\000\002\027\002\000\002\003\004\000" +
    "\002\004\006\000\002\030\003\000\002\030\002\000\002" +
    "\006\003\000\002\006\003\000\002\006\003\000\002\006" +
    "\003\000\002\007\004\000\002\007\006\000\002\007\011" +
    "\000\002\031\004\000\002\031\002\000\002\010\004\000" +
    "\002\010\004\000\002\010\004\000\002\010\004\000\002" +
    "\010\004\000\002\010\002\000\002\022\003\000\002\022" +
    "\003\000\002\020\003\000\002\020\003\000\002\020\003" +
    "\000\002\020\003\000\002\020\003\000\002\021\003\000" +
    "\002\021\003\000\002\021\003\000\002\021\003\000\002" +
    "\021\003\000\002\021\003\000\002\021\003\000\002\021" +
    "\003\000\002\015\004\000\002\015\004\000\002\015\006" +
    "\000\002\015\005\000\002\015\005\000\002\015\007\000" +
    "\002\015\004\000\002\034\004\000\002\034\004\000\002" +
    "\034\002\000\002\035\004\000\002\035\002\000\002\023" +
    "\003\000\002\023\003\000\002\014\012\000\002\032\006" +
    "\000\002\032\002\000\002\011\003\000\002\011\003\000" +
    "\002\016\011\000\002\017\015\000\002\024\006\000\002" +
    "\024\011\000\002\024\014\000\002\025\003\000\002\025" +
    "\003\000\002\012\007\000\002\013\007\000\002\013\007" +
    "" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\243\000\004\004\004\001\002\000\004\005\007\001" +
    "\002\000\004\002\006\001\002\000\004\002\001\001\002" +
    "\000\004\006\010\001\002\000\006\004\012\010\ufffe\001" +
    "\002\000\004\010\024\001\002\000\004\007\013\001\002" +
    "\000\004\064\014\001\002\000\006\040\017\065\ufffa\001" +
    "\002\000\004\065\021\001\002\000\006\004\012\010\ufffe" +
    "\001\002\000\004\065\ufffb\001\002\000\004\010\uffff\001" +
    "\002\000\052\004\ufffd\010\ufffd\025\ufffd\026\ufffd\027\ufffd" +
    "\032\ufffd\037\ufffd\040\ufffd\041\ufffd\046\ufffd\047\ufffd\050" +
    "\ufffd\051\ufffd\055\ufffd\056\ufffd\057\ufffd\060\022\062\ufffd" +
    "\071\ufffd\072\ufffd\001\002\000\004\065\023\001\002\000" +
    "\050\004\ufffc\010\ufffc\025\ufffc\026\ufffc\027\ufffc\032\ufffc" +
    "\037\ufffc\040\ufffc\041\ufffc\046\ufffc\047\ufffc\050\ufffc\051" +
    "\ufffc\055\ufffc\056\ufffc\057\ufffc\062\ufffc\071\ufffc\072\ufffc" +
    "\001\002\000\004\021\025\001\002\000\004\031\026\001" +
    "\002\000\004\032\027\001\002\000\004\035\030\001\002" +
    "\000\012\010\037\011\033\013\032\014\034\001\002\000" +
    "\004\022\242\001\002\000\004\064\ufff2\001\002\000\004" +
    "\064\ufff3\001\002\000\004\064\ufff4\001\002\000\020\015" +
    "\060\017\066\020\067\022\uffe7\023\064\024\065\064\062" +
    "\001\002\000\004\064\040\001\002\000\004\064\ufff5\001" +
    "\002\000\012\032\uffed\033\046\061\045\062\uffed\001\002" +
    "\000\004\062\042\001\002\000\030\010\037\011\033\013" +
    "\032\014\034\015\ufff6\017\ufff6\020\ufff6\022\ufff6\023\ufff6" +
    "\024\ufff6\064\ufff6\001\002\000\020\015\ufff7\017\ufff7\020" +
    "\ufff7\022\ufff7\023\ufff7\024\ufff7\064\ufff7\001\002\000\020" +
    "\015\ufff8\017\ufff8\020\ufff8\022\ufff8\023\ufff8\024\ufff8\064" +
    "\ufff8\001\002\000\004\064\040\001\002\000\004\065\050" +
    "\001\002\000\006\032\ufff1\062\ufff1\001\002\000\004\034" +
    "\051\001\002\000\010\032\ufff0\033\052\062\ufff0\001\002" +
    "\000\004\065\053\001\002\000\004\034\054\001\002\000" +
    "\006\032\uffef\062\uffef\001\002\000\006\032\uffee\062\uffee" +
    "\001\002\000\022\015\060\017\066\020\067\022\uffe7\023" +
    "\064\024\065\036\uffe7\064\062\001\002\000\022\015\060" +
    "\017\066\020\067\022\uffe7\023\064\024\065\036\uffe7\064" +
    "\062\001\002\000\004\031\225\001\002\000\004\022\ufff9" +
    "\001\002\000\006\033\205\052\204\001\002\000\022\015" +
    "\uffc6\017\uffc6\020\uffc6\022\uffc6\023\uffc6\024\uffc6\036\uffc6" +
    "\064\uffc6\001\002\000\004\031\176\001\002\000\004\031" +
    "\112\001\002\000\004\031\106\001\002\000\004\031\077" +
    "\001\002\000\022\015\uffc5\017\uffc5\020\uffc5\022\uffc5\023" +
    "\uffc5\024\uffc5\036\uffc5\064\uffc5\001\002\000\022\015\060" +
    "\017\066\020\067\022\uffe7\023\064\024\065\036\uffe7\064" +
    "\062\001\002\000\022\015\060\017\066\020\067\022\uffe7" +
    "\023\064\024\065\036\uffe7\064\062\001\002\000\022\015" +
    "\060\017\066\020\067\022\uffe7\023\064\024\065\036\uffe7" +
    "\064\062\001\002\000\006\022\uffeb\036\uffeb\001\002\000" +
    "\006\022\uffec\036\uffec\001\002\000\006\022\uffea\036\uffea" +
    "\001\002\000\006\064\040\066\100\001\002\000\004\032" +
    "\104\001\002\000\004\032\102\001\002\000\004\062\103" +
    "\001\002\000\022\015\uffbc\017\uffbc\020\uffbc\022\uffbc\023" +
    "\uffbc\024\uffbc\036\uffbc\064\uffbc\001\002\000\004\062\105" +
    "\001\002\000\022\015\uffbb\017\uffbb\020\uffbb\022\uffbb\023" +
    "\uffbb\024\uffbb\036\uffbb\064\uffbb\001\002\000\004\064\107" +
    "\001\002\000\004\032\110\001\002\000\004\062\111\001" +
    "\002\000\022\015\uffbd\017\uffbd\020\uffbd\022\uffbd\023\uffbd" +
    "\024\uffbd\036\uffbd\064\uffbd\001\002\000\004\064\062\001" +
    "\002\000\020\031\123\040\017\045\115\064\114\065\ufffa" +
    "\071\117\072\120\001\002\000\044\025\130\026\136\027" +
    "\145\032\uffce\037\144\040\135\041\126\046\132\047\140" +
    "\050\143\051\133\055\147\056\127\057\141\062\uffce\071" +
    "\117\072\120\001\002\000\020\031\123\040\017\045\115" +
    "\064\114\065\ufffa\071\117\072\120\001\002\000\044\025" +
    "\130\026\136\027\145\032\uffce\037\144\040\135\041\126" +
    "\046\132\047\140\050\143\051\133\055\147\056\127\057" +
    "\141\062\uffce\071\117\072\120\001\002\000\046\025\uffe6" +
    "\026\uffe6\027\uffe6\031\uffe6\032\uffe6\037\uffe6\040\uffe6\041" +
    "\uffe6\046\uffe6\047\uffe6\050\uffe6\051\uffe6\055\uffe6\056\uffe6" +
    "\057\uffe6\062\uffe6\064\uffe6\065\uffe6\001\002\000\046\025" +
    "\uffe5\026\uffe5\027\uffe5\031\uffe5\032\uffe5\037\uffe5\040\uffe5" +
    "\041\uffe5\046\uffe5\047\uffe5\050\uffe5\051\uffe5\055\uffe5\056" +
    "\uffe5\057\uffe5\062\uffe5\064\uffe5\065\uffe5\001\002\000\010" +
    "\031\165\064\164\065\163\001\002\000\004\062\154\001" +
    "\002\000\020\031\123\040\017\045\115\064\114\065\ufffa" +
    "\071\117\072\120\001\002\000\004\032\125\001\002\000" +
    "\044\025\130\026\136\027\145\032\uffce\037\144\040\135" +
    "\041\126\046\132\047\140\050\143\051\133\055\147\056" +
    "\127\057\141\062\uffce\071\117\072\120\001\002\000\020" +
    "\031\uffe3\040\uffe3\045\uffe3\064\uffe3\065\uffe3\071\uffe3\072" +
    "\uffe3\001\002\000\020\031\uffda\040\uffda\045\uffda\064\uffda" +
    "\065\uffda\071\uffda\072\uffda\001\002\000\020\031\uffd8\040" +
    "\uffd8\045\uffd8\064\uffd8\065\uffd8\071\uffd8\072\uffd8\001\002" +
    "\000\020\031\uffcb\040\uffcb\045\uffcb\064\uffcb\065\uffcb\071" +
    "\uffcb\072\uffcb\001\002\000\020\031\uffe0\040\uffe0\045\uffe0" +
    "\064\uffe0\065\uffe0\071\uffe0\072\uffe0\001\002\000\020\031" +
    "\uffdb\040\uffdb\045\uffdb\064\uffdb\065\uffdb\071\uffdb\072\uffdb" +
    "\001\002\000\020\031\uffca\040\uffca\045\uffca\064\uffca\065" +
    "\uffca\071\uffca\072\uffca\001\002\000\020\031\uffe1\040\uffe1" +
    "\045\uffe1\064\uffe1\065\uffe1\071\uffe1\072\uffe1\001\002\000" +
    "\020\031\uffd9\040\uffd9\045\uffd9\064\uffd9\065\uffd9\071\uffd9" +
    "\072\uffd9\001\002\000\006\032\uffd5\062\uffd5\001\002\000" +
    "\020\031\uffe4\040\uffe4\045\uffe4\064\uffe4\065\uffe4\071\uffe4" +
    "\072\uffe4\001\002\000\020\031\uffdc\040\uffdc\045\uffdc\064" +
    "\uffdc\065\uffdc\071\uffdc\072\uffdc\001\002\000\040\025\130" +
    "\026\136\027\145\032\uffcc\037\144\040\135\041\126\046" +
    "\132\047\140\050\143\051\133\055\147\056\127\057\141" +
    "\062\uffcc\001\002\000\020\031\uffdd\040\uffdd\045\uffdd\064" +
    "\uffdd\065\uffdd\071\uffdd\072\uffdd\001\002\000\020\031\uffe2" +
    "\040\uffe2\045\uffe2\064\uffe2\065\uffe2\071\uffe2\072\uffe2\001" +
    "\002\000\020\031\uffdf\040\uffdf\045\uffdf\064\uffdf\065\uffdf" +
    "\071\uffdf\072\uffdf\001\002\000\020\031\123\040\017\045" +
    "\115\064\114\065\ufffa\071\117\072\120\001\002\000\020" +
    "\031\uffde\040\uffde\045\uffde\064\uffde\065\uffde\071\uffde\072" +
    "\uffde\001\002\000\006\032\uffd0\062\uffd0\001\002\000\006" +
    "\032\uffcf\062\uffcf\001\002\000\020\031\123\040\017\045" +
    "\115\064\114\065\ufffa\071\117\072\120\001\002\000\006" +
    "\032\uffcd\062\uffcd\001\002\000\004\064\155\001\002\000" +
    "\006\071\117\072\120\001\002\000\004\032\157\001\002" +
    "\000\004\035\160\001\002\000\020\015\060\017\066\020" +
    "\067\023\064\024\065\036\uffe7\064\062\001\002\000\004" +
    "\036\162\001\002\000\022\015\uffc3\017\uffc3\020\uffc3\022" +
    "\uffc3\023\uffc3\024\uffc3\036\uffc3\064\uffc3\001\002\000\040" +
    "\025\130\026\136\027\145\032\uffcc\037\144\040\135\041" +
    "\126\046\132\047\140\050\143\051\133\055\147\056\127" +
    "\057\141\062\uffcc\001\002\000\040\025\130\026\136\027" +
    "\145\032\uffcc\037\144\040\135\041\126\046\132\047\140" +
    "\050\143\051\133\055\147\056\127\057\141\062\uffcc\001" +
    "\002\000\020\031\123\040\017\045\115\064\114\065\ufffa" +
    "\071\117\072\120\001\002\000\004\032\167\001\002\000" +
    "\040\025\130\026\136\027\145\032\uffcc\037\144\040\135" +
    "\041\126\046\132\047\140\050\143\051\133\055\147\056" +
    "\127\057\141\062\uffcc\001\002\000\006\032\uffd2\062\uffd2" +
    "\001\002\000\006\032\uffd3\062\uffd3\001\002\000\006\032" +
    "\uffd4\062\uffd4\001\002\000\006\032\uffd7\062\uffd7\001\002" +
    "\000\006\032\uffd1\062\uffd1\001\002\000\006\032\uffd6\062" +
    "\uffd6\001\002\000\020\031\123\040\017\045\115\064\114" +
    "\065\ufffa\071\117\072\120\001\002\000\004\032\200\001" +
    "\002\000\004\035\201\001\002\000\020\015\060\017\066" +
    "\020\067\023\064\024\065\036\uffe7\064\062\001\002\000" +
    "\004\036\203\001\002\000\022\015\uffc4\017\uffc4\020\uffc4" +
    "\022\uffc4\023\uffc4\024\uffc4\036\uffc4\064\uffc4\001\002\000" +
    "\022\031\123\040\017\045\115\064\114\065\ufffa\066\213" +
    "\071\117\072\120\001\002\000\004\065\206\001\002\000" +
    "\004\034\207\001\002\000\006\033\210\052\211\001\002" +
    "\000\004\065\216\001\002\000\022\031\123\040\017\045" +
    "\115\064\114\065\ufffa\066\213\071\117\072\120\001\002" +
    "\000\004\062\215\001\002\000\004\062\uffbe\001\002\000" +
    "\004\062\uffbf\001\002\000\036\015\uffc1\017\uffc1\020\uffc1" +
    "\022\uffc1\023\uffc1\024\uffc1\031\uffc1\036\uffc1\040\uffc1\045" +
    "\uffc1\064\uffc1\065\uffc1\071\uffc1\072\uffc1\001\002\000\004" +
    "\034\217\001\002\000\004\052\220\001\002\000\022\031" +
    "\123\040\017\045\115\064\114\065\ufffa\066\213\071\117" +
    "\072\120\001\002\000\004\062\222\001\002\000\036\015" +
    "\uffc0\017\uffc0\020\uffc0\022\uffc0\023\uffc0\024\uffc0\031\uffc0" +
    "\036\uffc0\040\uffc0\045\uffc0\064\uffc0\065\uffc0\071\uffc0\072" +
    "\uffc0\001\002\000\004\062\224\001\002\000\036\015\uffc2" +
    "\017\uffc2\020\uffc2\022\uffc2\023\uffc2\024\uffc2\031\uffc2\036" +
    "\uffc2\040\uffc2\045\uffc2\064\uffc2\065\uffc2\071\uffc2\072\uffc2" +
    "\001\002\000\020\031\123\040\017\045\115\064\114\065" +
    "\ufffa\071\117\072\120\001\002\000\004\032\227\001\002" +
    "\000\004\035\230\001\002\000\020\015\060\017\066\020" +
    "\067\023\064\024\065\036\uffe7\064\062\001\002\000\004" +
    "\036\232\001\002\000\024\015\uffc7\016\233\017\uffc7\020" +
    "\uffc7\022\uffc7\023\uffc7\024\uffc7\036\uffc7\064\uffc7\001\002" +
    "\000\004\035\235\001\002\000\022\015\uffc9\017\uffc9\020" +
    "\uffc9\022\uffc9\023\uffc9\024\uffc9\036\uffc9\064\uffc9\001\002" +
    "\000\020\015\060\017\066\020\067\023\064\024\065\036" +
    "\uffe7\064\062\001\002\000\004\036\237\001\002\000\022" +
    "\015\uffc8\017\uffc8\020\uffc8\022\uffc8\023\uffc8\024\uffc8\036" +
    "\uffc8\064\uffc8\001\002\000\006\022\uffe9\036\uffe9\001\002" +
    "\000\006\022\uffe8\036\uffe8\001\002\000\004\065\243\001" +
    "\002\000\004\062\244\001\002\000\004\036\245\001\002" +
    "\000\004\002\000\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\243\000\004\002\004\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\005\010\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\026\015\027\014\001\001\000\002" +
    "\001\001\000\004\005\017\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\003\030\004\034\006\035" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\022\010\060\011\071\012\072" +
    "\013\070\014\056\016\062\017\067\024\055\001\001\000" +
    "\004\007\040\001\001\000\002\001\001\000\004\031\046" +
    "\001\001\000\002\001\001\000\010\004\042\006\035\030" +
    "\043\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\007\054\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\022\010" +
    "\240\011\071\012\072\013\070\014\056\016\062\017\067" +
    "\024\055\001\001\000\022\010\237\011\071\012\072\013" +
    "\070\014\056\016\062\017\067\024\055\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\022\010\075\011" +
    "\071\012\072\013\070\014\056\016\062\017\067\024\055" +
    "\001\001\000\022\010\074\011\071\012\072\013\070\014" +
    "\056\016\062\017\067\024\055\001\001\000\022\010\073" +
    "\011\071\012\072\013\070\014\056\016\062\017\067\024" +
    "\055\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\007\100\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\024\112" +
    "\001\001\000\012\015\121\022\120\026\115\027\014\001" +
    "\001\000\014\020\130\021\133\022\141\023\145\034\174" +
    "\001\001\000\012\015\173\022\120\026\115\027\014\001" +
    "\001\000\014\020\130\021\133\022\141\023\145\034\172" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\015\123\022\120\026\115" +
    "\027\014\001\001\000\002\001\001\000\014\020\130\021" +
    "\133\022\141\023\145\034\136\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\020\130\021\133\023\151" +
    "\035\150\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\015\147\022\120\026\115\027\014" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\015\152\022\120\026\115\027\014\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\022\155\001" +
    "\001\000\002\001\001\000\002\001\001\000\022\010\160" +
    "\011\071\012\072\013\070\014\056\016\062\017\067\024" +
    "\055\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\020\130\021\133\023\151\035\171\001\001\000\012\020" +
    "\130\021\133\023\151\035\170\001\001\000\012\015\165" +
    "\022\120\026\115\027\014\001\001\000\002\001\001\000" +
    "\012\020\130\021\133\023\151\035\167\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\015\176" +
    "\022\120\026\115\027\014\001\001\000\002\001\001\000" +
    "\002\001\001\000\022\010\201\011\071\012\072\013\070" +
    "\014\056\016\062\017\067\024\055\001\001\000\002\001" +
    "\001\000\002\001\001\000\014\015\213\022\120\025\222" +
    "\026\115\027\014\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\014\015\213" +
    "\022\120\025\211\026\115\027\014\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\014\015\213\022" +
    "\120\025\220\026\115\027\014\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\015\225\022\120\026\115\027\014\001\001\000\002" +
    "\001\001\000\002\001\001\000\022\010\230\011\071\012" +
    "\072\013\070\014\056\016\062\017\067\024\055\001\001" +
    "\000\002\001\001\000\004\032\233\001\001\000\002\001" +
    "\001\000\002\001\001\000\022\010\235\011\071\012\072" +
    "\013\070\014\056\016\062\017\067\024\055\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Sintax$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Sintax$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Sintax$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    private Symbol s;
    
    public void syntax_error(Symbol s){
        this.s = s;
    }

    public Symbol getS(){
        return this.s;
}

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Sintax$actions {
  private final Sintax parser;

  /** Constructor */
  CUP$Sintax$actions(Sintax parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Sintax$do_action(
    int                        CUP$Sintax$act_num,
    java_cup.runtime.lr_parser CUP$Sintax$parser,
    java.util.Stack            CUP$Sintax$stack,
    int                        CUP$Sintax$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Sintax$result;

      /* select the action based on the action number */
      switch (CUP$Sintax$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // IMPRIMIR ::= Printf AbreP String FechaP Pv 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IMPRIMIR",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // IMPRIMIR ::= Printf AbreP LISTAIDS FechaP Pv 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IMPRIMIR",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // LER ::= Scanf AbreP Id FechaP Pv 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LER",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // VALOR ::= String 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VALOR",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // VALOR ::= EXPRESSAO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VALOR",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // ATRIBUICAO ::= Id AbreCO Numero FechaCO AbreCO Numero FechaCO Recebe VALOR Pv 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ATRIBUICAO",18, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-9)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // ATRIBUICAO ::= Id AbreCO Numero FechaCO Recebe VALOR Pv 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ATRIBUICAO",18, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // ATRIBUICAO ::= Id Recebe VALOR Pv 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ATRIBUICAO",18, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // LACO_FOR ::= Para AbreP ATRIBUICAO EXPRESSAO Pv Id INCREMENTO FechaP AbreCH COMANDOS FechaCH 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LACO_FOR",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-10)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // LACO_WHILE ::= Enquanto AbreP EXPRESSAO FechaP AbreCH COMANDOS FechaCH 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LACO_WHILE",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // REPETICAO ::= LACO_FOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("REPETICAO",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // REPETICAO ::= LACO_WHILE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("REPETICAO",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // AUX3 ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AUX3",24, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // AUX3 ::= Else AbreCH COMANDOS FechaCH 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AUX3",24, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // SE ::= If AbreP EXPRESSAO FechaP AbreCH COMANDOS FechaCH AUX3 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SE",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // OP_ARI_OU_LO ::= OP_LO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OP_ARI_OU_LO",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // OP_ARI_OU_LO ::= OP_ARI 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OP_ARI_OU_LO",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // AUX6 ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AUX6",27, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // AUX6 ::= OP_ARI_OU_LO EXPRESSAO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AUX6",27, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // AUX5 ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AUX5",26, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // AUX5 ::= INCREMENTO AUX6 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AUX5",26, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // AUX5 ::= OP_ARI_OU_LO EXPRESSAO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AUX5",26, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // EXPRESSAO ::= Not EXPRESSAO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESSAO",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // EXPRESSAO ::= INCREMENTO AbreP EXPRESSAO FechaP AUX6 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESSAO",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // EXPRESSAO ::= INCREMENTO Id AUX6 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESSAO",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // EXPRESSAO ::= INCREMENTO Numero AUX6 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESSAO",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // EXPRESSAO ::= AbreP EXPRESSAO FechaP AUX5 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESSAO",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // EXPRESSAO ::= Id AUX5 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESSAO",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // EXPRESSAO ::= NUMEROAUX AUX5 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESSAO",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // OP_LO ::= AndAnd 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OP_LO",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // OP_LO ::= Or 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OP_LO",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // OP_LO ::= MaiorIgual 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OP_LO",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // OP_LO ::= Maior 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OP_LO",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // OP_LO ::= MenorIgual 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OP_LO",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // OP_LO ::= Menor 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OP_LO",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // OP_LO ::= Diferente 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OP_LO",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // OP_LO ::= Equal 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OP_LO",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // OP_ARI ::= Resto 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OP_ARI",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // OP_ARI ::= Subtracao 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OP_ARI",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // OP_ARI ::= Soma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OP_ARI",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // OP_ARI ::= Divisao 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OP_ARI",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // OP_ARI ::= Multiplicacao 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OP_ARI",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // INCREMENTO ::= Decremento 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INCREMENTO",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // INCREMENTO ::= Incremento 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INCREMENTO",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // COMANDOS ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("COMANDOS",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // COMANDOS ::= ATRIBUICAO COMANDOS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("COMANDOS",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // COMANDOS ::= SE COMANDOS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("COMANDOS",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // COMANDOS ::= IMPRIMIR COMANDOS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("COMANDOS",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // COMANDOS ::= LER COMANDOS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("COMANDOS",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // COMANDOS ::= REPETICAO COMANDOS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("COMANDOS",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // AUX2 ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AUX2",23, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // AUX2 ::= Vir LISTAIDS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AUX2",23, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // LISTAIDS ::= Id AbreCO Numero FechaCO AbreCO Numero FechaCO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LISTAIDS",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // LISTAIDS ::= Id AbreCO Numero FechaCO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LISTAIDS",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // LISTAIDS ::= Id AUX2 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LISTAIDS",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // TIPO ::= Char 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TIPO",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // TIPO ::= Double 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TIPO",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // TIPO ::= Float 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TIPO",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // TIPO ::= Int 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TIPO",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // AUX1 ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AUX1",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // AUX1 ::= DECLARACAO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AUX1",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // DECLARACAO ::= TIPO LISTAIDS Pv AUX1 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACAO",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // COMANDO ::= DECLARACAO COMANDOS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("COMANDO",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // POSITIVO_OU_NEGATIVO ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("POSITIVO_OU_NEGATIVO",21, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // POSITIVO_OU_NEGATIVO ::= Subtracao 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("POSITIVO_OU_NEGATIVO",21, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // NUMEROAUX ::= POSITIVO_OU_NEGATIVO Numero Ponto Numero 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NUMEROAUX",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // NUMEROAUX ::= POSITIVO_OU_NEGATIVO Numero 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NUMEROAUX",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // MAISCONST ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("MAISCONST",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // MAISCONST ::= Hash Constante Id NUMEROAUX MAISCONST 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("MAISCONST",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= Hash Include Lib MAISCONST Int Main AbreP FechaP AbreCH COMANDO Return Numero Pv FechaCH 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-13)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		RESULT = start_val;
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Sintax$parser.done_parsing();
          return CUP$Sintax$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

